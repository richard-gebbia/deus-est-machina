Elm.Questions = Elm.Questions || {};
Elm.Questions.make = function (_elm) {
   "use strict";
   _elm.Questions = _elm.Questions || {};
   if (_elm.Questions.values)
   return _elm.Questions.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Questions",
   $Array = Elm.Array.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $HtmlUtils = Elm.HtmlUtils.make(_elm),
   $Json$Decode = Elm.Json.Decode.make(_elm),
   $Json$Encode = Elm.Json.Encode.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Question = Elm.Question.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var toJson = function (model) {
      return $Json$Encode.list($Array.toList(A2($Array.map,
      $Question.toJson,
      model.questions)));
   };
   var update = F2(function (action,
   model) {
      return function () {
         switch (action.ctor)
         {case "DeleteQuestion":
            return _U.replace([["questions"
                               ,A2($Array.append,
                               A3($Array.slice,
                               0,
                               action._0,
                               model.questions),
                               A3($Array.slice,
                               action._0 + 1,
                               $Array.length(model.questions),
                               model.questions))]],
              model);
            case "ModifyQuestion":
            return _U.replace([["questions"
                               ,$Maybe.withDefault(model.questions)($Maybe.map(function (question) {
                                  return A3($Array.set,
                                  action._0,
                                  question,
                                  model.questions);
                               })($Maybe.map($Question.update(action._1))(A2($Array.get,
                               action._0,
                               model.questions))))]],
              model);
            case "NewQuestion":
            return _U.replace([["questions"
                               ,A2($Array.push,
                               $Question.init,
                               model.questions)]],
              model);}
         _U.badCase($moduleName,
         "between lines 40 and 66");
      }();
   });
   var DeleteQuestion = function (a) {
      return {ctor: "DeleteQuestion"
             ,_0: a};
   };
   var NewQuestion = {ctor: "NewQuestion"};
   var ModifyQuestion = F2(function (a,
   b) {
      return {ctor: "ModifyQuestion"
             ,_0: a
             ,_1: b};
   });
   var view = F2(function (address,
   model) {
      return function () {
         var addButton = A2($Html.button,
         _L.fromArray([A2($Html$Events.onClick,
         address,
         NewQuestion)]),
         _L.fromArray([$Html.text("Add")]));
         var context = function (i) {
            return {_: {}
                   ,actions: A2($Signal.forwardTo,
                   address,
                   ModifyQuestion(i))
                   ,remove: A2($Signal.forwardTo,
                   address,
                   $Basics.always(DeleteQuestion(i)))};
         };
         var questionViews = $Array.toList(A2($Array.indexedMap,
         F2(function (i,question) {
            return A2($Question.view,
            context(i),
            question);
         }),
         model.questions));
         return A2($Html.div,
         _L.fromArray([$Html$Attributes.style(A2($Basics._op["++"],
         _L.fromArray([{ctor: "_Tuple2"
                       ,_0: "backgroundColor"
                       ,_1: "rgb(200,255,200)"}
                      ,{ctor: "_Tuple2"
                       ,_0: "width"
                       ,_1: "250px"}
                      ,{ctor: "_Tuple2"
                       ,_0: "padding"
                       ,_1: "2px"}
                      ,{ctor: "_Tuple2"
                       ,_0: "textAlign"
                       ,_1: "center"}]),
         $HtmlUtils.bordered))]),
         A2($Basics._op["++"],
         A2($List._op["::"],
         $HtmlUtils.title("Questions"),
         questionViews),
         _L.fromArray([addButton])));
      }();
   });
   var Model = function (a) {
      return {_: {},questions: a};
   };
   var fromJson = $Json$Decode.map(Model)($Json$Decode.map($Array.fromList)($Json$Decode.list($Question.fromJson)));
   _elm.Questions.values = {_op: _op
                           ,Model: Model
                           ,fromJson: fromJson
                           ,ModifyQuestion: ModifyQuestion
                           ,NewQuestion: NewQuestion
                           ,DeleteQuestion: DeleteQuestion
                           ,update: update
                           ,view: view
                           ,toJson: toJson};
   return _elm.Questions.values;
};