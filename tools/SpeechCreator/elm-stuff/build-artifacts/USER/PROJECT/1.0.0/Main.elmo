Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Main",
   $Array = Elm.Array.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Conversation = Elm.Conversation.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $Json$Decode = Elm.Json.Decode.make(_elm),
   $Json$Encode = Elm.Json.Encode.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp = Elm.StartApp.make(_elm);
   var ViewGraph = {ctor: "ViewGraph"};
   var ViewJson = {ctor: "ViewJson"};
   var SubmitInput = {ctor: "SubmitInput"};
   var EditInput = function (a) {
      return {ctor: "EditInput"
             ,_0: a};
   };
   var ModifyConversation = function (a) {
      return {ctor: "ModifyConversation"
             ,_0: a};
   };
   var view = F2(function (address,
   model) {
      return function () {
         var textareaWithText = function (str) {
            return A2($Html.textarea,
            _L.fromArray([$Html$Attributes.value(str)
                         ,$Html$Attributes.style(_L.fromArray([{ctor: "_Tuple2"
                                                               ,_0: "width"
                                                               ,_1: "400px"}
                                                              ,{ctor: "_Tuple2"
                                                               ,_0: "height"
                                                               ,_1: "600px"}]))
                         ,A2($Html$Events.on,
                         "input",
                         $Html$Events.targetValue)(function ($) {
                            return $Signal.message(address)(EditInput($));
                         })]),
            _L.fromArray([]));
         };
         var onClick = function (action) {
            return A2($Html$Events.onClick,
            address,
            action);
         };
         return function () {
            var _v0 = model.viewMode;
            switch (_v0.ctor)
            {case "ViewingGraph":
               return A2($Html.div,
                 _L.fromArray([]),
                 _L.fromArray([A2($Html.button,
                              _L.fromArray([onClick(ViewJson)]),
                              _L.fromArray([$Html.text("Encode")]))
                              ,A2($Conversation.view,
                              A2($Signal.forwardTo,
                              address,
                              ModifyConversation),
                              model.conversation)]));
               case "ViewingJson":
               return A2($Html.div,
                 _L.fromArray([]),
                 _L.fromArray([A2($Html.button,
                              _L.fromArray([onClick(ViewGraph)]),
                              _L.fromArray([$Html.text("Graph")]))
                              ,A2($Html.br,
                              _L.fromArray([]),
                              _L.fromArray([]))
                              ,textareaWithText($Json$Encode.encode(4)($Conversation.toJson(model.conversation)))
                              ,A2($Html.br,
                              _L.fromArray([]),
                              _L.fromArray([]))
                              ,A2($Html.button,
                              _L.fromArray([onClick(SubmitInput)]),
                              _L.fromArray([$Html.text("Submit")]))
                              ,A2($Html.br,
                              _L.fromArray([]),
                              _L.fromArray([]))
                              ,A2($Html.div,
                              _L.fromArray([$Html$Attributes.style(_L.fromArray([{ctor: "_Tuple2"
                                                                                 ,_0: "color"
                                                                                 ,_1: "red"}]))]),
                              _L.fromArray([$Html.text(model.errorText)]))]));}
            _U.badCase($moduleName,
            "between lines 100 and 122");
         }();
      }();
   });
   var Model = F4(function (a,
   b,
   c,
   d) {
      return {_: {}
             ,conversation: a
             ,errorText: d
             ,inputText: c
             ,viewMode: b};
   });
   var ViewingGraph = {ctor: "ViewingGraph"};
   var init = {_: {}
              ,conversation: A2($Dict.insert,
              "questions1",
              $Conversation.Asking({_: {}
                                   ,questions: $Array.fromList(_L.fromArray([{_: {}
                                                                             ,children: _L.fromArray([])
                                                                             ,line1: "How can she slap?!"
                                                                             ,line2: ""
                                                                             ,line3: ""}]))}))(A2($Dict.singleton,
              "ava1",
              $Conversation.Talking({_: {}
                                    ,children: _L.fromArray([])
                                    ,line1: "Hello"
                                    ,line2: "My name is Ava"
                                    ,line3: ""
                                    ,speaker: "Ava"})))
              ,errorText: ""
              ,inputText: ""
              ,viewMode: ViewingGraph};
   var ViewingJson = {ctor: "ViewingJson"};
   var update = F2(function (action,
   model) {
      return function () {
         switch (action.ctor)
         {case "EditInput":
            return _U.replace([["inputText"
                               ,action._0]],
              model);
            case "ModifyConversation":
            return _U.replace([["conversation"
                               ,A2($Conversation.update,
                               action._0,
                               model.conversation)]],
              model);
            case "SubmitInput":
            return function (result) {
                 return function () {
                    switch (result.ctor)
                    {case "Err":
                       return _U.replace([["errorText"
                                          ,result._0]],
                         model);
                       case "Ok":
                       return _U.replace([["conversation"
                                          ,result._0]],
                         model);}
                    _U.badCase($moduleName,
                    "between lines 61 and 67");
                 }();
              }(A2($Json$Decode.decodeString,
              $Conversation.fromJson,
              model.inputText));
            case "ViewGraph":
            return _U.replace([["viewMode"
                               ,ViewingGraph]],
              model);
            case "ViewJson":
            return _U.replace([["viewMode"
                               ,ViewingJson]],
              model);}
         return model;
      }();
   });
   var main = $StartApp.start({_: {}
                              ,model: init
                              ,update: update
                              ,view: view});
   _elm.Main.values = {_op: _op
                      ,ViewingJson: ViewingJson
                      ,ViewingGraph: ViewingGraph
                      ,Model: Model
                      ,ModifyConversation: ModifyConversation
                      ,EditInput: EditInput
                      ,SubmitInput: SubmitInput
                      ,ViewJson: ViewJson
                      ,ViewGraph: ViewGraph
                      ,update: update
                      ,view: view
                      ,init: init
                      ,main: main};
   return _elm.Main.values;
};