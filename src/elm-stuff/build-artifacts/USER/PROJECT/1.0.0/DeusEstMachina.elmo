Elm.DeusEstMachina = Elm.DeusEstMachina || {};
Elm.DeusEstMachina.make = function (_elm) {
   "use strict";
   _elm.DeusEstMachina = _elm.DeusEstMachina || {};
   if (_elm.DeusEstMachina.values)
   return _elm.DeusEstMachina.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "DeusEstMachina",
   $Basics = Elm.Basics.make(_elm),
   $Conversation = Elm.Conversation.make(_elm),
   $ConversationGen = Elm.ConversationGen.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Mouse = Elm.Mouse.make(_elm),
   $PortraitBox = Elm.PortraitBox.make(_elm),
   $PortraitBoxGen = Elm.PortraitBoxGen.make(_elm),
   $QuestionList = Elm.QuestionList.make(_elm),
   $QuestionListGen = Elm.QuestionListGen.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $TextboxList = Elm.TextboxList.make(_elm),
   $TextboxListGen = Elm.TextboxListGen.make(_elm),
   $Time = Elm.Time.make(_elm);
   var conversationText = Elm.Native.Port.make(_elm).inboundSignal("conversationText",
   "String",
   function (v) {
      return typeof v === "string" || typeof v === "object" && v instanceof String ? v : _U.badPort("a string",
      v);
   });
   var NewConversation = function (a) {
      return {ctor: "NewConversation"
             ,_0: a};
   };
   var Tick = function (a) {
      return {ctor: "Tick",_0: a};
   };
   var actions = $Signal.mailbox(Tick(0));
   var ChooseQuestion = function (a) {
      return {ctor: "ChooseQuestion"
             ,_0: a};
   };
   var ChooseSpeaker = function (a) {
      return {ctor: "ChooseSpeaker"
             ,_0: a};
   };
   var Click = {ctor: "Click"};
   var signals = $Signal.mergeMany(A2($List._op["::"],
   actions.signal,
   _L.fromArray([A2($Signal._op["<~"],
                $Basics.always(Click),
                $Mouse.clicks)
                ,A2($Signal._op["<~"],
                function ($) {
                   return Tick($Time.inSeconds($));
                },
                $Time.fps(60))
                ,A2($Signal._op["<~"],
                function ($) {
                   return NewConversation($ConversationGen.genConversation($));
                },
                conversationText)])));
   var unwrap = function (_v0) {
      return function () {
         switch (_v0.ctor)
         {case "Model": return _v0._0;}
         _U.badCase($moduleName,
         "on line 35, column 23 to 27");
      }();
   };
   var view = F2(function (address,
   model) {
      return function () {
         var qlEventToAction = function (_v3) {
            return function () {
               switch (_v3.ctor)
               {case "ChooseQuestion":
                  return ChooseQuestion(_v3._0);}
               _U.badCase($moduleName,
               "on line 238, column 13 to 36");
            }();
         };
         var pbEventToAction = function (_v6) {
            return function () {
               switch (_v6.ctor)
               {case "OnPortraitClick":
                  return ChooseSpeaker(_v6._0);}
               _U.badCase($moduleName,
               "on line 235, column 13 to 31");
            }();
         };
         return A2($Basics._op["++"],
         $TextboxList.view(unwrap(model).textboxList),
         A2($Basics._op["++"],
         A2($QuestionList.view,
         A2($Signal.forwardTo,
         address,
         qlEventToAction),
         unwrap(model).questionList),
         A2($PortraitBox.view,
         A2($Signal.forwardTo,
         address,
         pbEventToAction),
         unwrap(model).portraitBox)));
      }();
   });
   var Model = function (a) {
      return {ctor: "Model",_0: a};
   };
   var waitingForQuestionResponse = F3(function (index,
   action,
   model) {
      return function () {
         var modelData = unwrap(model);
         return function () {
            switch (action.ctor)
            {case "ChooseSpeaker":
               return $Maybe.withDefault(model)($Maybe.map(Model)($Maybe.map(A2(advance,
                 modelData,
                 action._0))(A3($Conversation.chooseQuestionResponder,
                 index,
                 action._0,
                 modelData.conversation))));
               case "Tick":
               return Model(_U.replace([["textboxList"
                                        ,$Basics.fst(A2($TextboxList.update,
                                        $TextboxList.Tick(action._0),
                                        modelData.textboxList))]],
                 modelData));}
            return model;
         }();
      }();
   });
   var advance = F3(function (modelData,
   name,
   _v12) {
      return function () {
         switch (_v12.ctor)
         {case "_Tuple2":
            return _U.replace([["conversation"
                               ,_v12._0]
                              ,["previous",$Maybe.Just(name)]
                              ,["portraitBox"
                               ,A2($PortraitBox.update,
                               $PortraitBox.LetThemSpeak(name),
                               modelData.portraitBox)]
                              ,["textboxList"
                               ,$Basics.fst(A2($TextboxList.update,
                               A2($TextboxList.AddTextbox,
                               _v12._1.name,
                               _v12._1.text),
                               modelData.textboxList))]
                              ,["gameStateUpdate"
                               ,waitingForTextboxToFinish]],
              modelData);}
         _U.badCase($moduleName,
         "between lines 52 and 63");
      }();
   });
   var waitingForTextboxToFinish = F2(function (action,
   model) {
      return function () {
         var onClick = function (modelData) {
            return _U.replace([["portraitBox"
                               ,$Conversation.areQuestionsComingUp(modelData.conversation) ? A2($PortraitBox.update,
                               $PortraitBox.ThePlayerIsSpeaking,
                               modelData.portraitBox) : $Maybe.withDefault(modelData.portraitBox)($Maybe.map(function (names) {
                                  return A2($PortraitBox.update,
                                  $PortraitBox.SetResponders(names),
                                  modelData.portraitBox);
                               })($Conversation.getResponderNames(modelData.conversation)))]
                              ,["textboxList"
                               ,$Basics.fst(A2($TextboxList.update,
                               $TextboxList.FinishCurrentTextbox,
                               modelData.textboxList))]
                              ,["gameStateUpdate"
                               ,$Conversation.areQuestionsComingUp(modelData.conversation) ? waitingToShowQuestions : choosingSpeaker]],
            modelData);
         };
         var onTick = F2(function (dt,
         modelData) {
            return function (_v16) {
               return function () {
                  switch (_v16.ctor)
                  {case "_Tuple2":
                     return function () {
                          switch (_v16._1.ctor)
                          {case "Just":
                             switch (_v16._1._0.ctor)
                               {case "ReadyForNewTextboxes":
                                  return onClick(modelData);}
                               break;}
                          return _U.replace([["textboxList"
                                             ,_v16._0]],
                          modelData);
                       }();}
                  _U.badCase($moduleName,
                  "between lines 110 and 118");
               }();
            }(A2($TextboxList.update,
            $TextboxList.Tick(dt),
            modelData.textboxList));
         });
         return function () {
            switch (action.ctor)
            {case "Click":
               return Model(onClick(unwrap(model)));
               case "Tick":
               return Model(A2(onTick,
                 action._0,
                 unwrap(model)));}
            return model;
         }();
      }();
   });
   var choosingSpeaker = F2(function (action,
   model) {
      return function () {
         switch (action.ctor)
         {case "ChooseSpeaker":
            return $Maybe.withDefault(model)($Maybe.map(Model)($Maybe.map(A2(advance,
              unwrap(model),
              action._0))(A2($Conversation.chooseSpeaker,
              action._0,
              unwrap(model).conversation))));}
         return model;
      }();
   });
   var waitingToShowQuestions = F2(function (action,
   model) {
      return function () {
         var modelData = unwrap(model);
         var onClick = function (_v26) {
            return function () {
               switch (_v26.ctor)
               {case "_Tuple2":
                  return _U.replace([["conversation"
                                     ,_v26._0]
                                    ,["previous",$Maybe.Nothing]
                                    ,["textboxList"
                                     ,$Basics.fst(A2($TextboxList.update,
                                     $TextboxList.Hide,
                                     modelData.textboxList))]
                                    ,["questionList"
                                     ,A2($QuestionList.update,
                                     $QuestionList.ShowQuestions(_v26._1),
                                     modelData.questionList)]
                                    ,["gameStateUpdate"
                                     ,showingQuestions]],
                    modelData);}
               _U.badCase($moduleName,
               "between lines 135 and 145");
            }();
         };
         return function () {
            switch (action.ctor)
            {case "Click":
               return Model(onClick($Maybe.withDefault({ctor: "_Tuple2"
                                                       ,_0: modelData.conversation
                                                       ,_1: _L.fromArray([])})($Conversation.getQuestions(modelData.conversation))));}
            return model;
         }();
      }();
   });
   var showingQuestions = F2(function (action,
   model) {
      return function () {
         var modelData = unwrap(model);
         var respondToChosenQuestion = F2(function (index,
         _v31) {
            return function () {
               switch (_v31.ctor)
               {case "_Tuple2":
                  return _U.replace([["questionList"
                                     ,A2($QuestionList.update,
                                     $QuestionList.Hide,
                                     modelData.questionList)]
                                    ,["textboxList"
                                     ,$Basics.fst($TextboxList.update(A2($TextboxList.AddFullTextbox,
                                     "Question",
                                     _v31._0))($Basics.fst(A2($TextboxList.update,
                                     $TextboxList.Show,
                                     modelData.textboxList))))]
                                    ,["portraitBox"
                                     ,A2($PortraitBox.update,
                                     $PortraitBox.SetResponders(_v31._1),
                                     modelData.portraitBox)]
                                    ,["gameStateUpdate"
                                     ,waitingForQuestionResponse(index)]],
                    modelData);}
               _U.badCase($moduleName,
               "between lines 164 and 177");
            }();
         });
         return function () {
            switch (action.ctor)
            {case "ChooseQuestion":
               return Model(respondToChosenQuestion(action._0)(function (_v37) {
                    return function () {
                       switch (_v37.ctor)
                       {case "_Tuple2":
                          return {ctor: "_Tuple2"
                                 ,_0: A2($Maybe.withDefault,
                                 _L.fromArray([]),
                                 _v37._0)
                                 ,_1: A2($Maybe.withDefault,
                                 _L.fromArray([]),
                                 _v37._1)};}
                       _U.badCase($moduleName,
                       "on line 190, column 22 to 80");
                    }();
                 }(function (names) {
                    return {ctor: "_Tuple2"
                           ,_0: A2($Conversation.getQuestionText,
                           action._0,
                           modelData.conversation)
                           ,_1: names};
                 }(A2($Conversation.chooseQuestion,
                 action._0,
                 modelData.conversation)))));}
            return model;
         }();
      }();
   });
   var initModel = function (conversation) {
      return function () {
         var portraitBox = A2($PortraitBoxGen.genPortraitBox,
         0,
         -300);
         return Model({_: {}
                      ,conversation: conversation
                      ,gameStateUpdate: choosingSpeaker
                      ,portraitBox: $PortraitBox.update($PortraitBox.SetResponders($Maybe.withDefault(_L.fromArray([]))($Conversation.getResponderNames(conversation))))(portraitBox)
                      ,previous: $Maybe.Nothing
                      ,questionList: $QuestionListGen.genQuestionList
                      ,textboxList: $TextboxListGen.genTextboxList});
      }();
   };
   var update = F2(function (action,
   model) {
      return function () {
         switch (action.ctor)
         {case "NewConversation":
            return initModel(action._0);}
         return A2(unwrap(model).gameStateUpdate,
         action,
         model);
      }();
   });
   var main = function () {
      var model = initModel($ConversationGen.genConversation($ConversationGen.testConversation));
      return $Signal.map(A2($Graphics$Collage.collage,
      1024,
      768))($Signal.map(view(actions.address))(A3($Signal.foldp,
      update,
      model,
      signals)));
   }();
   var ModelData = F6(function (a,
   b,
   c,
   d,
   e,
   f) {
      return {_: {}
             ,conversation: a
             ,gameStateUpdate: f
             ,portraitBox: b
             ,previous: c
             ,questionList: d
             ,textboxList: e};
   });
   _elm.DeusEstMachina.values = {_op: _op
                                ,ModelData: ModelData
                                ,Model: Model
                                ,unwrap: unwrap
                                ,Click: Click
                                ,ChooseSpeaker: ChooseSpeaker
                                ,ChooseQuestion: ChooseQuestion
                                ,Tick: Tick
                                ,NewConversation: NewConversation
                                ,advance: advance
                                ,choosingSpeaker: choosingSpeaker
                                ,waitingForTextboxToFinish: waitingForTextboxToFinish
                                ,waitingToShowQuestions: waitingToShowQuestions
                                ,showingQuestions: showingQuestions
                                ,waitingForQuestionResponse: waitingForQuestionResponse
                                ,update: update
                                ,view: view
                                ,actions: actions
                                ,signals: signals
                                ,initModel: initModel
                                ,main: main};
   return _elm.DeusEstMachina.values;
};