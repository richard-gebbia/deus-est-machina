Elm.Textbox = Elm.Textbox || {};
Elm.Textbox.make = function (_elm) {
   "use strict";
   _elm.Textbox = _elm.Textbox || {};
   if (_elm.Textbox.values)
   return _elm.Textbox.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Textbox",
   $Basics = Elm.Basics.make(_elm),
   $ClickForm = Elm.ClickForm.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Sprite = Elm.Sprite.make(_elm),
   $String = Elm.String.make(_elm),
   $Text = Elm.Text.make(_elm);
   var Click = {ctor: "Click"};
   var formText = function (text) {
      return function () {
         var el = $Graphics$Element.leftAligned(text);
         var $ = $Graphics$Element.sizeOf(el),
         iElWidth = $._0,
         iElHeight = $._1;
         var $ = {ctor: "_Tuple2"
                 ,_0: $Basics.toFloat(iElWidth)
                 ,_1: $Basics.toFloat(iElHeight)},
         elWidth = $._0,
         elHeight = $._1;
         var contain = function (_v0) {
            return function () {
               switch (_v0.ctor)
               {case "_Tuple2":
                  return A2($Graphics$Element.container,
                    _v0._0,
                    _v0._1);}
               _U.badCase($moduleName,
               "on line 113, column 35 to 65");
            }();
         };
         return $Graphics$Collage.move({ctor: "_Tuple2"
                                       ,_0: elWidth / 2
                                       ,_1: (0 - elHeight) / 2})($Graphics$Collage.text(text));
      }();
   };
   var FinishedShowingText = {ctor: "FinishedShowingText"};
   var Tick = function (a) {
      return {ctor: "Tick",_0: a};
   };
   var Finish = {ctor: "Finish"};
   var MoveBy = function (a) {
      return {ctor: "MoveBy"
             ,_0: a};
   };
   var timeToFinish = function (model) {
      return function (x) {
         return x / model.lettersPerSecond;
      }($Basics.toFloat($List.sum(A2($List.map,
      $String.length,
      model.text))));
   };
   var isFinished = function (model) {
      return _U.cmp(model.elapsedTime,
      timeToFinish(model)) > -1;
   };
   var update = F2(function (action,
   model) {
      return function () {
         switch (action.ctor)
         {case "Finish":
            return {ctor: "_Tuple2"
                   ,_0: _U.replace([["elapsedTime"
                                    ,timeToFinish(model)]],
                   model)
                   ,_1: $Maybe.Just(FinishedShowingText)};
            case "MoveBy":
            switch (action._0.ctor)
              {case "_Tuple2":
                 return {ctor: "_Tuple2"
                        ,_0: _U.replace([["background"
                                         ,{_: {}
                                          ,height: model.background.height
                                          ,imageName: model.background.imageName
                                          ,width: model.background.width
                                          ,x: model.background.x + action._0._0
                                          ,y: model.background.y + action._0._1}]
                                        ,["portrait"
                                         ,{_: {}
                                          ,height: model.portrait.height
                                          ,imageName: model.portrait.imageName
                                          ,width: model.portrait.width
                                          ,x: model.portrait.x + action._0._0
                                          ,y: model.portrait.y + action._0._1}]
                                        ,["nameX"
                                         ,model.nameX + action._0._0]
                                        ,["nameY"
                                         ,model.nameY + action._0._1]
                                        ,["textX"
                                         ,model.textX + action._0._0]
                                        ,["textY"
                                         ,model.textY + action._0._1]],
                        model)
                        ,_1: $Maybe.Nothing};}
              break;
            case "Tick":
            return {ctor: "_Tuple2"
                   ,_0: _U.replace([["elapsedTime"
                                    ,model.elapsedTime + action._0]],
                   model)
                   ,_1: _U.cmp(model.elapsedTime + action._0,
                   timeToFinish(model)) > -1 ? $Maybe.Just(FinishedShowingText) : $Maybe.Nothing};}
         _U.badCase($moduleName,
         "between lines 68 and 107");
      }();
   });
   var textToShow = function (model) {
      return function () {
         var inner = F2(function (str,
         _v9) {
            return function () {
               switch (_v9.ctor)
               {case "_Tuple2":
                  return _U.cmp(_v9._1,
                    0) > -1 ? {ctor: "_Tuple2"
                              ,_0: $List.append(_v9._0)(_L.fromArray([A2($String.left,
                              _v9._1,
                              str)]))
                              ,_1: _v9._1 - $String.length(str)} : {ctor: "_Tuple2"
                                                                   ,_0: _v9._0
                                                                   ,_1: _v9._1};}
               _U.badCase($moduleName,
               "between lines 37 and 39");
            }();
         });
         var lettersToShow = $Basics.round(model.lettersPerSecond * model.elapsedTime);
         return $Basics.fst(A3($List.foldl,
         inner,
         {ctor: "_Tuple2"
         ,_0: _L.fromArray([])
         ,_1: lettersToShow},
         model.text));
      }();
   };
   var view = F2(function (address,
   model) {
      return function () {
         var lineSpacing = function (style) {
            return $Maybe.withDefault(20)($Maybe.map(function (y) {
               return y + 2;
            })(style.height));
         };
         var linesOfText = $List.length(textToShow(model));
         var textYValues = A2($List.map,
         function (y) {
            return model.textY - lineSpacing(model.textStyle) * $Basics.toFloat(y);
         },
         _L.range(0,linesOfText));
         var background = model.clickable ? A2($ClickForm.spriteButton,
         model.background,
         A2($Signal.message,
         address,
         Click)) : $Sprite.draw(model.background);
         var drawText = F4(function (style,
         x,
         y,
         text) {
            return $Graphics$Collage.move({ctor: "_Tuple2"
                                          ,_0: x
                                          ,_1: y})(formText($Text.style(style)($Text.fromString(text))));
         });
         var prepend = F2(function (x,
         y) {
            return A2($Basics._op["++"],
            y,
            x);
         });
         return A2($Basics._op["++"],
         _L.fromArray([background
                      ,$Sprite.draw(model.portrait)
                      ,A4(drawText,
                      model.nameStyle,
                      model.nameX,
                      model.nameY,
                      model.name)]),
         A3($List.map2,
         A2(drawText,
         model.textStyle,
         model.textX),
         textYValues,
         textToShow(model)));
      }();
   });
   var Model = function (a) {
      return function (b) {
         return function (c) {
            return function (d) {
               return function (e) {
                  return function (f) {
                     return function (g) {
                        return function (h) {
                           return function (i) {
                              return function (j) {
                                 return function (k) {
                                    return function (l) {
                                       return function (m) {
                                          return {_: {}
                                                 ,background: c
                                                 ,clickable: m
                                                 ,elapsedTime: l
                                                 ,lettersPerSecond: k
                                                 ,name: a
                                                 ,nameStyle: e
                                                 ,nameX: f
                                                 ,nameY: g
                                                 ,portrait: d
                                                 ,text: b
                                                 ,textStyle: h
                                                 ,textX: i
                                                 ,textY: j};
                                       };
                                    };
                                 };
                              };
                           };
                        };
                     };
                  };
               };
            };
         };
      };
   };
   _elm.Textbox.values = {_op: _op
                         ,Model: Model
                         ,textToShow: textToShow
                         ,timeToFinish: timeToFinish
                         ,isFinished: isFinished
                         ,MoveBy: MoveBy
                         ,Finish: Finish
                         ,Tick: Tick
                         ,FinishedShowingText: FinishedShowingText
                         ,update: update
                         ,formText: formText
                         ,view: view
                         ,Click: Click};
   return _elm.Textbox.values;
};