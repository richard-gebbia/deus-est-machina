Elm.QuestionList = Elm.QuestionList || {};
Elm.QuestionList.make = function (_elm) {
   "use strict";
   _elm.QuestionList = _elm.QuestionList || {};
   if (_elm.QuestionList.values)
   return _elm.QuestionList.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "QuestionList",
   $Basics = Elm.Basics.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $List = Elm.List.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Textbox = Elm.Textbox.make(_elm);
   var ChooseQuestion = function (a) {
      return {ctor: "ChooseQuestion"
             ,_0: a};
   };
   var view = F2(function (address,
   model) {
      return function () {
         var viewQuestion = F2(function (index,
         question) {
            return A2($Textbox.view,
            A2($Signal.forwardTo,
            address,
            $Basics.always(ChooseQuestion(index))),
            question);
         });
         return $List.concat(A2($List.indexedMap,
         viewQuestion,
         model.questions));
      }();
   });
   var makeQuestions = F2(function (model,
   questions) {
      return function () {
         var position = F3(function (_v0,
         _v1,
         t) {
            return function () {
               switch (_v1.ctor)
               {case "_Tuple2":
                  return function () {
                       switch (_v0.ctor)
                       {case "_Tuple2":
                          return {ctor: "_Tuple2"
                                 ,_0: _v0._0 + _v1._0 * t
                                 ,_1: _v0._1 + _v1._1 * t};}
                       _U.badCase($moduleName,
                       "on line 33, column 14 to 36");
                    }();}
               _U.badCase($moduleName,
               "on line 33, column 14 to 36");
            }();
         });
         var positions = A2($List.map,
         A2(position,
         model.firstQuestionPosition,
         model.questionStride),
         A2($List.map,
         $Basics.toFloat,
         _L.range(0,
         $List.length(questions) - 1)));
         var makeQuestion = F2(function (text,
         position) {
            return $Basics.fst($Textbox.update($Textbox.Finish)(A2(model.questionFrame,
            text,
            position)));
         });
         return A3($List.map2,
         makeQuestion,
         questions,
         positions);
      }();
   });
   var update = F2(function (action,
   model) {
      return function () {
         switch (action.ctor)
         {case "Hide":
            return _U.replace([["questions"
                               ,_L.fromArray([])]],
              model);
            case "ShowQuestions":
            return _U.replace([["questions"
                               ,A2(makeQuestions,
                               model,
                               action._0)]],
              model);}
         _U.badCase($moduleName,
         "between lines 44 and 52");
      }();
   });
   var Hide = {ctor: "Hide"};
   var ShowQuestions = function (a) {
      return {ctor: "ShowQuestions"
             ,_0: a};
   };
   var Model = F4(function (a,
   b,
   c,
   d) {
      return {_: {}
             ,firstQuestionPosition: b
             ,questionFrame: d
             ,questionStride: c
             ,questions: a};
   });
   _elm.QuestionList.values = {_op: _op
                              ,Model: Model
                              ,ShowQuestions: ShowQuestions
                              ,Hide: Hide
                              ,makeQuestions: makeQuestions
                              ,update: update
                              ,view: view
                              ,ChooseQuestion: ChooseQuestion};
   return _elm.QuestionList.values;
};