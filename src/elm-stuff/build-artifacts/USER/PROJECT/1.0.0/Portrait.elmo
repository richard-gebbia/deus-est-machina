Elm.Portrait = Elm.Portrait || {};
Elm.Portrait.make = function (_elm) {
   "use strict";
   _elm.Portrait = _elm.Portrait || {};
   if (_elm.Portrait.values)
   return _elm.Portrait.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Portrait",
   $Basics = Elm.Basics.make(_elm),
   $ClickForm = Elm.ClickForm.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Interjection = Elm.Interjection.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Sprite = Elm.Sprite.make(_elm);
   var Click = {ctor: "Click"};
   var view = F2(function (address,
   model) {
      return function () {
         var spriteView = function () {
            var _v0 = model.interjection.interjection;
            switch (_v0.ctor)
            {case "Quiet":
               return $Sprite.draw(model.sprite);}
            return A2($ClickForm.spriteButton,
            model.sprite,
            A2($Signal.message,
            address,
            Click));
         }();
         return _L.fromArray([spriteView
                             ,$Interjection.view(model.interjection)]);
      }();
   });
   var update = F2(function (action,
   model) {
      return function () {
         var determineInterjection = F2(function (previous,
         name) {
            return _U.eq(name,
            previous) ? $Interjection.Continuation : $Interjection.Exclamation;
         });
         var interjection = F2(function (names,
         previous) {
            return $Maybe.withDefault($Interjection.Quiet)($Maybe.map(determineInterjection(previous))($List.head(A2($List.filter,
            function (name) {
               return _U.eq(name,
               model.name);
            },
            names))));
         });
         var iAction = F2(function (names,
         previous) {
            return $Interjection.SetInterjection(A2(interjection,
            names,
            previous));
         });
         return function () {
            switch (action.ctor)
            {case "Quiet":
               return _U.replace([["interjection"
                                  ,A2($Interjection.update,
                                  $Interjection.SetInterjection($Interjection.Quiet),
                                  model.interjection)]],
                 model);
               case "SetResponse":
               return _U.replace([["interjection"
                                  ,A2($Interjection.update,
                                  A2(iAction,action._0,action._1),
                                  model.interjection)]],
                 model);}
            _U.badCase($moduleName,
            "between lines 44 and 59");
         }();
      }();
   });
   var Quiet = {ctor: "Quiet"};
   var SetResponse = F2(function (a,
   b) {
      return {ctor: "SetResponse"
             ,_0: a
             ,_1: b};
   });
   var Model = F3(function (a,
   b,
   c) {
      return {_: {}
             ,interjection: b
             ,name: a
             ,sprite: c};
   });
   _elm.Portrait.values = {_op: _op
                          ,Model: Model
                          ,SetResponse: SetResponse
                          ,Quiet: Quiet
                          ,update: update
                          ,view: view
                          ,Click: Click};
   return _elm.Portrait.values;
};